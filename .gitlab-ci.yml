# Usage:
# Set these private variables in gitlab-ci environment:
#   CI_JOB_TOKEN
#   REGISTRY_URI

stages:
  - Analyze and Unit Test
  - ui
  - Functional Tests
  - Promote Images
  - Publish Package
  - Clean

image: docker:19.03.8

before_script:
  - export TAG=bld_$CI_PIPELINE_IID_${CI_COMMIT_SHA:0:7}
  - apk add make

.registry_template: &registry_login
  before_script:
  - export TAG=bld_$CI_PIPELINE_IID_${CI_COMMIT_SHA:0:7}
  - apk add docker-cli make
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $REGISTRY_URI
  services: [ "docker:dind" ]

.create_image_template: &create_image
  script: make create_image

create_apicrud_ui:
  stage: ui
  <<: *registry_login
  <<: *create_image

analysis:
  stage: Analyze and Unit Test
  image: instantlinux/node-builder:12.16.2-alpine
  script:
  - set -e
  - make analysis
  - make test
  artifacts:
    paths:
    - coverage/
    - junit.xml
    reports:
      junit: junit.xml
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/

test:
  stage: Functional Tests
  script: make test_functional

promote_images:
  stage: Promote Images
  image: node:12.16.2-alpine
  <<: *registry_login
  script:
    - IMAGES=ui make promote_images
  only: { refs: [ master ] }

publish:
  stage: Publish Package
  image: instantlinux/node-builder:12.16.2-alpine
  script: apk add docker-cli && make publish
  only: [ tags ]

clean:
  stage: Clean
  script: make clean_images
  when: always
