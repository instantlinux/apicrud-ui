# Usage:
# Set these private variables in gitlab-ci environment:
#   DOCKER_TOKEN, REGISTRY_URI

variables:
  PLATFORMS: linux/amd64,linux/arm/v6,linux/arm/v7

stages:
  - Analyze and Unit Test
  - ui
  - Functional Tests
  - Promote Images
  - Publish Package
  - Clean

image: node:12.18.0-alpine
before_script:
  - export TAG=bld_$CI_PIPELINE_IID_${CI_COMMIT_SHA:0:7}
  - apk add make

.registry_template: &registry_login
  before_script:
  - export TAG=bld_$CI_PIPELINE_IID_${CI_COMMIT_SHA:0:7}
  - apk add make
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $REGISTRY_URI
  image: docker:19.03.8
  services: [ "docker:dind" ]

.create_image_template: &create_image
  script: make create_image

analysis:
  stage: Analyze and Unit Test
  script:
  - set -e
  - make analysis
  - make test
  artifacts:
    paths: [ coverage/, junit.xml ]
    reports:
      junit: junit.xml
  cache:
    key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
    paths: [ node_modules/ ]
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/

create_apicrud_ui:
  stage: ui
  <<: *registry_login
  <<: *create_image
  # TODO docker-mount this cache to speed up image build
  # cache:
  #   key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
  #   paths: [ node_modules/ ]
  #   policy: pull

# test:
#   stage: Functional Tests
#   script: make test_functional

promote_images:
  stage: Promote Images
  <<: *registry_login
  script: apk add curl && IMAGES=ui make promote_images
  only: [ master, tags ]

publish:
  stage: Publish Package
  script:
  - echo //registry.npmjs.org/:_authToken=$NPMJS_TOKEN >.npmrc
  - TAG=$CI_COMMIT_TAG make publish
  only: [ tags ]

clean:
  stage: Clean
  image: docker:19.03.8
  script: apk add make && make clean_images
  when: always
